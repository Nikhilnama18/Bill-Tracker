{"remainingRequest":"/home/nikhil/Desktop/Project/front_end/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/nikhil/Desktop/Project/front_end/src/views/Dashboard.vue?vue&type=style&index=0&id=22ba47ca&scoped=true&lang=css","dependencies":[{"path":"/home/nikhil/Desktop/Project/front_end/src/views/Dashboard.vue","mtime":1628680119302},{"path":"/home/nikhil/Desktop/Project/front_end/node_modules/css-loader/dist/cjs.js","mtime":1626765536510},{"path":"/home/nikhil/Desktop/Project/front_end/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1626765537046},{"path":"/home/nikhil/Desktop/Project/front_end/node_modules/postcss-loader/src/index.js","mtime":1626765536658},{"path":"/home/nikhil/Desktop/Project/front_end/node_modules/cache-loader/dist/cjs.js","mtime":1626765536234},{"path":"/home/nikhil/Desktop/Project/front_end/node_modules/vue-loader-v16/dist/index.js","mtime":1626765536830}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jb250YWluZXJzIHsKICBtYXgtd2lkdGg6IDUwMHB4OwogIG1hcmdpbjogMzBweCBhdXRvOwogIG92ZXJmbG93OiBhdXRvOwogIG1pbi1oZWlnaHQ6IDEwMHB4OwogIGJvcmRlcjogMXB4IHNvbGlkIHN0ZWVsYmx1ZTsKICBwYWRkaW5nOiAyMHB4OwogIGJvcmRlci1yYWRpdXM6IDEwcHg7Cn0K"},{"version":3,"sources":["/home/nikhil/Desktop/Project/front_end/src/views/Dashboard.vue"],"names":[],"mappings":";AA8GA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACrB","file":"/home/nikhil/Desktop/Project/front_end/src/views/Dashboard.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"containers\">\n    <Button\n      @click=\"logout\"\n      title=\"Logout\"\n      color=\"red\"\n      :style=\"{ float: 'right' }\"\n    />\n    <h1>Organisations</h1>\n    <Button @click=\"addorg\" title=\"Add Organisation\" color=\"green\" />\n    <AddOrg @refresh=\"pushOrg\" @cancel=\"cancel\" v-if=\"addOrg\" />\n    <div>\n      <Organisations @deleteOrg=\"deleteOrg\" v-if=\"logged\" :Orgs=\"Orgs\" />\n    </div>\n    <!-- <Button @click=\"\" title=\"Cancel\" color=\"red\" /> -->\n    <p v-if=\"true\"></p>\n  </div>\n</template>\n\n<script>\nimport Button from \"../components/Button.vue\";\nimport Organisations from \"../components/Organisations.vue\";\nimport AddOrg from \"../components/AddOrg.vue\";\nexport default {\n  name: \"Dashboard\",\n  data() {\n    return {\n      Orgs: Array,\n      logged: false,\n      addOrg: false,\n    };\n  },\n  components: {\n    Button,\n    Organisations,\n    AddOrg,\n  },\n  methods: {\n    async deleteOrg(org_id) {\n      const data = {\n        u_id: localStorage.getItem(\"u_id\"),\n        o_id: org_id,\n      };\n      const response = await fetch(\n        `api/users/${localStorage.getItem(\"u_id\")}/orgs/${org_id}`,\n        {\n          method: \"DELETE\",\n          headers: {\n            \"Content-type\": \"application/json\",\n            authorization: `Bearer ${localStorage.getItem(\"jwtToken\")}`,\n          },\n          body: JSON.stringify(data),\n        }\n      );\n      if (response.status === 200) {\n        this.fetchorg();\n      }\n    },\n    logout() {\n      localStorage.removeItem(\"u_id\");\n      localStorage.removeItem(\"jwtToken\");\n      localStorage.removeItem(\"org_id\");\n      this.$router.push({ name: \"Login\" });\n    },\n\n    addorg() {\n      this.addOrg = !this.addOrg;\n    },\n    cancel() {\n      this.addOrg = false;\n    },\n    async fetchorg() {\n      this.addOrg = false;\n      const response = await fetch(\n        `api/users/${localStorage.getItem(\"u_id\")}/orgs`,\n        {\n          method: \"GET\",\n          headers: {\n            \"Content-type\": \"application/json\",\n            authorization: `Bearer ${localStorage.getItem(\"jwtToken\")}`,\n          },\n        }\n      );\n      if (response.status === 200) {\n        let result = await response.json();\n        this.logged = true;\n        this.Orgs = result.data;\n      }\n    },\n    pushOrg(data) {\n      this.Orgs.push(data[0]);\n    },\n    getUserId() {\n      return localStorage.getItem(\"u_id\");\n    },\n\n    getJwtToken() {\n      return localStorage.getItem(\"jwtToken\");\n    },\n  },\n  created() {\n    if (!this.getUserId() || !this.getJwtToken()) {\n      this.$router.push(\"Login\");\n    }\n    this.fetchorg();\n  },\n};\n</script>\n\n<style scoped>\n.containers {\n  max-width: 500px;\n  margin: 30px auto;\n  overflow: auto;\n  min-height: 100px;\n  border: 1px solid steelblue;\n  padding: 20px;\n  border-radius: 10px;\n}\n</style>"]}]}